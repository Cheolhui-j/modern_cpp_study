/*
 * 스택(Stack) 메모리 설명
 *
 * 스택은 함수가 호출될 때 지역 변수, 매개변수, 함수 반환 주소 등이 임시로 저장되는 메모리 영역입니다.
 * 함수 실행이 시작되면 해당 함수를 위한 공간(스택 프레임)이 스택에 할당되고, 함수 실행이 끝나면 할당된 공간이 해제됩니다.
 * 이러한 'Last-In, First-Out' (LIFO) 구조 때문에 스택이라고 부릅니다.
 *
 * 아래는 main 함수가 실행될 때의 스택 메모리 상태를 나타내는 가상 다이어그램입니다.
 *
 *       +-------------------------+  <-- 높은 메모리 주소
 *       |                         |
 *       |   (다른 프로그램 데이터)    |
 *       |                         |
 *       +-------------------------+
 *       |                         |
 *       |  main 함수의 스택 프레임  |
 *       |-------------------------|
 *       | double d (8 bytes)      |  <-- &d (d의 주소)
 *       |-------------------------|
 *       |   int c (4 bytes)       |  <-- &c (c의 주소)
 *       |-------------------------|
 *       |   int b (4 bytes)       |  <-- &b (b의 주소)
 *       |-------------------------|
 *       |   int a (4 bytes)       |  <-- &a (a의 주소)
 *       +-------------------------+  <-- 낮은 메모리 주소 (스택이 이 방향으로 자람)
 *       |                         |
 *
 * 설명:
 * 1. `main` 함수가 실행되면, `main` 함수만을 위한 메모리 공간인 **스택 프레임(Stack Frame)**이 스택 영역에 생성됩니다.
 * 2. 코드에 선언된 순서대로 지역 변수 `a`, `b`, `c`, `d`가 스택 프레임 내에 차례대로 할당됩니다.
 * 3. 대부분의 시스템에서 스택은 **높은 메모리 주소에서 낮은 메모리 주소 방향으로** 자랍니다.
 *    따라서 나중에 선언된 변수일수록 더 낮은 메모리 주소를 갖게 됩니다. (실제 주소 값은 컴파일러나 운영체제에 따라 달라질 수 있습니다.)
 * 4. `int`는 보통 4바이트, `double`은 8바이트의 크기를 가집니다. 각 변수는 자신의 자료형 크기만큼 스택에 공간을 차지합니다.
 * 5. `main` 함수의 실행이 끝나면( `return 0;` ), 이 스택 프레임은 통째로 사라지며 여기에 할당되었던 모든 지역 변수들(`a`, `b`, `c`, `d`)도 함께 사라집니다.
 */
 
#include <iostream>

int main()
{
    int a = 0;
    int b = 3;
    int c = a + b;
    double d = 2.5;

    std::cout << "a : " << (long) &a << std::endl;
    std::cout << "b : " << (long) &b << std::endl;
    std::cout << "c : " << (long) &c << std::endl;
    std::cout << "d : " << (long) &d << std::endl;

    std::cout << "\n--- 실행 시점의 스택 메모리 구조 (가상) ---" << std::endl;
    std::cout << "      +-------------------------+  <-- 높은 메모리 주소" << std::endl;
    std::cout << "      |  main 함수의 스택 프레임  |" << std::endl;
    std::cout << "      |-------------------------|" << std::endl;
    std::cout << "      | double d | " << (long)&d << " |" << std::endl;
    std::cout << "      |-------------------------|" << std::endl;
    std::cout << "      |   int c  | " << (long)&c << " |" << std::endl;
    std::cout << "      |-------------------------|" << std::endl;
    std::cout << "      |   int b  | " << (long)&b << " |" << std::endl;
    std::cout << "      |-------------------------|" << std::endl;
    std::cout << "      |   int a  | " << (long)&a << " |" << std::endl;
    std::cout << "      +-------------------------+  <-- 낮은 메모리 주소" << std::endl;

    return 0;
}